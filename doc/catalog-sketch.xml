<!--* A hand-created sketch of a test catalog *-->
<?xml-stylesheet type="text/xsl" href="../lib/testcat-html.xsl"?>
<test-catalog
    xmlns="https://github.com/cmsmcq/ixml-tests"
    xmlns:gt="http://blackmesatech.com/2020/grammartools"
    name="Straw man sketch" release-date="2021-01-25">
  
  <description>
    <p>This is a hand-created mockup of a test catalog, created to
    help myself visualize how things should fit together.</p>

    <p>Revisions:  2021-01-25 : CMSMcQ : began making the file.</p>    
    
    <p>It is inspired partly by examination of the XSD and QT3 test
    suites, and partly by introspection. The XSD test suite has firm
    ideas about what belongs in a document together and what must be
    in a separate document; in particular, it requires test cases and
    the catalogs for test sets (the constituent parts of a test suite)
    to be in separate documents.  The QT3 test suite is explicitly
    more relaxed about that, at least as regards actual test cases.
    Having the test-case input internal to the catalog makes some
    tasks easier, and avoids filling a directory with many many very
    small files.</p>
    <p>So as a design principle I would like to say that both test
    cases and test sets can occur either inline or externally.
    So there will be <code>test-set</code> and <code>test-set-ref</code>
    elements, <code>test-case</code> and <code>test-case-ref</code>
    elements.  And similarly for other things I discover I want to
    have either inline or external.</p>
  </description>

  <test-set name="a">
    <created by="C. M. Sperberg-McQueen" on="2021-01-25"/>

    <description>
      <p>This is a very small grammar, with a very few test cases.
      Everything is so small it fits nicely inline.</p>
      <p>The grammar is one of the smallest that illustrates center
      embedding.</p>
      <p>This collection of tests illustrates one important
      pattern for test sets:  inputs are a grammar in ixml notation
      and some strings which do or do not belong to the language
      defined by the grammar.  Expected results include the XML
      form of the ixml grammar (that is, the result of parsing it
      against the standard ixml grammar for ixml) and the XML
      form of the strings.</p>
      <p>Other patterns may exist, but for now, I think this
      works.</p>
    </description>
    
    <ixml-grammar>S: 'a'; '(', S, ')'.</ixml-grammar>

    <test-set name="a-handwork">
      <created on="2021-01-25" by="CMSMcQ"/>
      <grammar-test>
	<created by="C. M. Sperberg-McQueen" on="2021-01-25"/>
	<result>
	  <assert-xml-ref href="a/a.ixml.xml"/>
	</result>
      </grammar-test>
      <test-case>
	<created by="C. M. Sperberg-McQueen" on="2021-01-25"/>
	<test-string>a</test-string>
	<result>
	  <assert-xml><S>a</S></assert-xml>
	</result>
      </test-case>
      <test-case>
	<created by="C. M. Sperberg-McQueen" on="2021-01-25"/>
	<test-string>(a)</test-string>
	<result>
	  <assert-xml><S>(<S>a</S>)</S></assert-xml>
	</result>
      </test-case>
      <test-case>
	<created by="C. M. Sperberg-McQueen" on="2021-01-25"/>
	<test-string>(((((((a)))))))</test-string>
	<result>
	  <assert-xml><S>(<S>(<S>(<S>(<S>(<S>(<S>(<S>a</S>)</S>)</S>)</S>)</S>)</S>)</S>)</S></assert-xml>
	</result>
      </test-case>
      
      <test-case>
	<created by="C. M. Sperberg-McQueen" on="2021-01-25"/>
	<test-string>(((((((a))))))</test-string>
	<result>
	  <assert-not-a-sentence/>
	</result>
      </test-case>
      <test-case>
	<created by="C. M. Sperberg-McQueen" on="2021-01-25"/>
	<test-string>(b)</test-string>
	<result>
	  <assert-not-a-sentence/>
	</result>
      </test-case>      

    </test-set>
    
    <test-set name="a-arc-final-negative">
      <created by="Gingersnap (CMSMcQ)" on="2021-01-17"/>
      <description>
	<p>This set of test cases is constructed using
	'arc-final' coverage:  for each arc in the FSA
	used to generate the test cases, a test case is
	constructed that begins in the start state and
	ends by traversing that arc.  If the arc's target
	state is final, the test is a positive test
	(and not included here); otherwise it's a negative
	test and is included here.</p>
      </description>

      <test-case xml:id="arc-final-m-S_2˃1"
		 gt:polarity="negative"
		 gt:trace="S_0 . 2 / m-S_2 + m-S_2˃1">
	<created by="Gingersnap (CMSMcQ)" on="2021-01-17"/>
	<test-string>(a</test-string>
	<result><assert-not-a-sentence/></result>
	<description>
	  <p>This test case illustrates the general principle
	  that everywhere in the test catalog, namespaced
	  attributes in other namespaces are allowed.  The
	  test case was generated by Gingersnap, which uses the
	  gt:* attributes to provide some metadata about the
	  test:  the gt:trace attribute identifies the states
	  and arcs visited by this test, in the finite state
	  automaton from which the tests were generated.
	  The gt:polarity attribute specifies that the
	  input string is not a sentence.  (It's redundant,
	  since in this catalog sketch that information is
	  conveyed by the <code>result</code> element
	  containing <code>assert-not-a-sentence</code>.)
	  But I have kept it around to illustrate the point.</p>
	</description>
      </test-case>
      <test-case xml:id="arc-final-m-S_2˃2"
		 gt:polarity="negative"
		 gt:trace="S_0 . 2 / m-S_2 + m-S_2˃2">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-final-m-S·S·_2˃1"
		 gt:polarity="negative"
		 gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 + m-S·S·_2˃1">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((a</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-final-m-S·S·_2˃2"
		 gt:polarity="negative"
		 gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 + m-S·S·_2˃2">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-final-m-S·S·S·_1˃1"
		 gt:polarity="negative"
		 gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 1 / m-S·S·S·_1 + m-S·S·S·_1˃1">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((a)</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-final-m-S·S·S·_2˃1"
		 gt:polarity="negative"
		 gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 + m-S·S·S·_2˃1">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((((</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-final-m-S·S·S·_2˃2"
		 gt:polarity="negative"
		 gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 + m-S·S·S·_2˃2">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-final-m-max-S_1˃1"
		 gt:polarity="negative"
		 gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 1 / m-max-S_1 + m-max-S_1˃1">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((((</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-final-m-max-S_1˃2"
		 gt:polarity="negative"
		 gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 1 / m-max-S_1 + m-max-S_1˃2">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((((a</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-final-m-max-S_2˃1"
		 gt:polarity="negative"
		 gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 + m-max-S_2˃1">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a)</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-final-m-S·S·S·_4˅max-S_3˃1"
		 gt:polarity="negative"
		 gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 . 1 / m-S·S·S·_4˅max-S_3 + m-S·S·S·_4˅max-S_3˃1">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>

    </test-set>
    
    <test-set name="a-arc-negative">

      <created by="Gingersnap (CMSMcQ)" on="2021-01-17"/>      
      <description>
	<p>This set of test cases is constructed using 'negative
	arc-internal' coverage: for each arc in the FSA used to
	generate the test cases, one or more test cases are
	constructed that begin in the start state, traverse that
	arc, and continue, ending in a non-final state.</p>
      </description>
      
      <test-case xml:id="arc-neg-m-S_2˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 + m-S_2˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>($)</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S_2˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 + m-S_2˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>($</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S_2˃2"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 + m-S_2˃2 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(#a))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S_2˃2"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 + m-S_2˃2 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(#))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·_1˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 1 / m-S·S·_1 + m-S·S·_1˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(a </test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·_1˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 1 / m-S·S·_1 + m-S·S·_1˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(a </test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·_2˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 + m-S·S·_2˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(())</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·_2˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 + m-S·S·_2˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(()</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·_2˃2"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 + m-S·S·_2˃2 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((儽a)))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·_2˃2"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 + m-S·S·_2˃2 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((儽)))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_1˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 1 / m-S·S·S·_1 + m-S·S·S·_1˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((a)</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_1˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 1 / m-S·S·S·_1 + m-S·S·S·_1˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((a</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_2˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 + m-S·S·S·_2˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((#a)))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_2˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 + m-S·S·S·_2˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((#)))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_2˃2"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 + m-S·S·S·_2˃2 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((()))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_2˃2"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 + m-S·S·S·_2˃2 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((())</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·_4˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 1 / m-S·S·S·_1 . 1 / m-S·S·_4 + m-S·S·_4˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((a) </test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·_4˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 1 / m-S·S·S·_1 . 1 / m-S·S·_4 + m-S·S·_4˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((a) </test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-max-S_1˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 1 / m-max-S_1 + m-max-S_1˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<modified by="C. M. Sperberg-McQueen"
		  on="2021-01-25"
		  change="Changed U+5350 to U+5343"/>
	<test-string>((((千a)))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-max-S_1˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 1 / m-max-S_1 + m-max-S_1˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<modified by="C. M. Sperberg-McQueen"
		  on="2021-01-25"
		  change="Changed U+5350 to U+5343"/>
	<test-string>((((千)))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-max-S_1˃2"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 1 / m-max-S_1 + m-max-S_1˃2 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((((񫛜)))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-max-S_1˃2"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 1 / m-max-S_1 + m-max-S_1˃2 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>((((񫛜))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-max-S_2˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 + m-max-S_2˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a퟿))</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-max-S_2˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 + m-max-S_2˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a퟿)</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_4˅max-S_3˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 . 1 / m-S·S·S·_4˅max-S_3 + m-S·S·S·_4˅max-S_3˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a)#)</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_4˅max-S_3˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 . 1 / m-S·S·S·_4˅max-S_3 + m-S·S·S·_4˅max-S_3˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a)#</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_4˅S·S·_4˅max-S_3˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 . 1 / m-S·S·S·_4˅max-S_3 . 1 / m-S·S·S·_4˅S·S·_4˅max-S_3 + m-S·S·S·_4˅S·S·_4˅max-S_3˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a))񹚗)</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_4˅S·S·_4˅max-S_3˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 . 1 / m-S·S·S·_4˅max-S_3 . 1 / m-S·S·S·_4˅S·S·_4˅max-S_3 + m-S·S·S·_4˅S·S·_4˅max-S_3˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a))񹚗</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_4˅S·S·_4˅max-S_3˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 . 1 / m-S·S·S·_4˅max-S_3 . 1 / m-S·S·S·_4˅S·S·_4˅max-S_3 + m-S·S·S·_4˅S·S·_4˅max-S_3˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a))񹚗</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S·S·S·_4˅S·S·_4˅max-S_3˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 . 1 / m-S·S·S·_4˅max-S_3 . 1 / m-S·S·S·_4˅S·S·_4˅max-S_3 + m-S·S·S·_4˅S·S·_4˅max-S_3˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a))񹚗</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 . 1 / m-S·S·S·_4˅max-S_3 . 1 / m-S·S·S·_4˅S·S·_4˅max-S_3 . 1 / m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3 + m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a))) )</test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 . 1 / m-S·S·S·_4˅max-S_3 . 1 / m-S·S·S·_4˅S·S·_4˅max-S_3 . 1 / m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3 + m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a))) </test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 . 1 / m-S·S·S·_4˅max-S_3 . 1 / m-S·S·S·_4˅S·S·_4˅max-S_3 . 1 / m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3 + m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a))) </test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>
      <test-case xml:id="arc-neg-m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3˃1"
		gt:polarity="negative"
		gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-max-S_2 . 1 / m-S·S·S·_4˅max-S_3 . 1 / m-S·S·S·_4˅S·S·_4˅max-S_3 . 1 / m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3 + m-S_4˅S·S·S·_4˅S·S·_4˅max-S_3˃1 + error">
	<created by="C. M. Sperberg-McQueen (using Gingersnap)"
		 on="2021-01-17"/>
	<test-string>(((a))) </test-string>
	<result><assert-not-a-sentence/></result>
      </test-case>

    </test-set>
  </test-set>

  <test-set name="ixml">
    <created by="C. M. Sperberg-McQueen (Gingersnap)"
	     on="2021-01-24"/>

    <vxml-grammar-ref href="https://invisiblexml.org/ixml.xml"/>

    <description>
      <p>This test set illustrates cases in which
      the input string and/or the expected output are
      external.</p>
      <p>It also illustrates the provision of other information
      by embedding it in app-info.</p>
    </description>

    <test-case xml:id="ixml-1">
      <created by="CMSMcQ (Gingersnap)" on="2021-01-24"/>
      <test-string-ref href="ixml/ixml-1.ixml"/>
      <result>
	<assert-xml-ref href="ixml/ixml-1.ixml.xml"/>
      </result>
      <app-info>
	<raw-parse-tree-ref href="ixml/ixml-1.raw.xml"/>
      </app-info>
    </test-case>

    <test-case xml:id="ixml-2">
      <created by="CMSMcQ (Gingersnap)" on="2021-01-24"/>
      <test-string-ref href="ixml/ixml-2.ixml"/>
      <result>
	<assert-xml-ref href="ixml/ixml-2.ixml.xml"/>
      </result>
      <app-info>
	<raw-parse-tree-ref href="ixml/ixml-2.raw.xml"/>
      </app-info>
    </test-case>

  </test-set>
  
</test-catalog>
  
