{ Sample grammar from Niklaus Wirth, Grundlagen und Techniken des
Compilerbaus (Bonn: Addison-Wesley, 1996), pp. 36-37.

Oberon-0.

Rules for ws added for convenience; Wirth assumes the lexer
eats whitespace. }

{ Revisions:
  2018-08-10 : CMSMcQ : correct syntax errors found by DCG parser
  2018-08-09 : CMSMcQ : made first transcription; needs testing, since
      the translation from Wirth's EBNF is error-prone.
}

{ We move the rule for module to the front, since it is the
start symbol. }

module:
    S?, "MODULE", S,
    ident, S?, ";", S?,
    declarations,
    ("BEGIN", S, StatementSequence)?,
    "END", S?, ident, S?, ".", S?.
ident:
    letter, (letter; digit)*, S?.
integer:
    digit, (digit)*.

selector:
    (".", S?, ident; "[", S?, expression, "]", S?)*.
number:
    integer, S?.
factor:
    ident, selector;
    number;
    "(", S?, expression, ")", S?;
    "~", S?, factor.
term:
    factor+(("*"; "DIV"; "MOD"; "&"), S?).
SimpleExpression:
    ("+";"-")?, term+(("+";"-";"OR"), S?).
    { N.B. Simplexpression allows 1, -1, 1 + 1,
      -1 + 1, but not 1 + -1.
      I expect that's intentional.
      I've made it also forbid white space between sign and term.
    }    
expression:
    SimpleExpression, ("="; "#"; "<"; "<="; ">"; ">="), SimpleExpression.
assignment:
    ident, selector, ":=", S?, expression.
ActualParameters:
    "(", S?, expression*(",", S?), ")", S?.
ProcedureCall:
    ident, selector, ActualParameters?.
IfStatement:
    "IF", S?, expression, "THEN", S?, StatementSequence,
    ("ELSIF", S?, expression, "THEN", S?, StatementSequence)*,
    "ELSE", S?, StatementSequence, "END", S?.
WhileStatement:
    "WHILE", S?, expression, "DO", S?, StatementSequence, "END", S?.
statement:
    (assignment; ProcedureCall; IfStatement; WhileStatement)?.
StatementSequence:
    statement+(";", S?).

IdentList:
    ident+(",", S?).
ArrayType:
    "ARRAY", S?, expression, "OF", S?, type.
FieldList:
    (IdentList, ":", S?, type)?.
RecordType:
    "RECORD", S?, FieldList+(";", S?), "END", S?.
type:
    ident; ArrayType; RecordType.
FPSection:
    ("VAR")?, S, IdentList, ":", S?, type.
FormalParameters:
    "(", S?, FPSection*(";", S?), ")", S?.
ProcedureHeading:
    "PROCEDURE", S, ident, S?, FormalParameters?.
ProcedureBody:
    declarations, ("BEGIN", S?, StatementSequence)?, "END", S, ident.
ProcedureDeclaration:
    ProcedureHeading, ";", S?, ProcedureBody.
declarations:
    ("CONST", S, (ident, "=", S?, expression, ";", S?)*)?,
    ("TYPE", S, (IdentList, "=", S?, type, ";")*)?,
    ("VAR", S, (IdentList, ":", S?, type, ";")*)?,
    ProcedureDeclaration*(";", S?).

{ S and comment added here to make the grammar usable without
  a scanner. N.B. Comments do not nest. }
S: (ws; comment)+.
ws: [" "; #09; #0A; #0D].
comment: "(*", nonstar*, "*"+, (nonrpnonstar, nonstar*, "*"+)*, ")".
nonstar: ~["*"].
nonrpnonstar: ~[")"; "*"].