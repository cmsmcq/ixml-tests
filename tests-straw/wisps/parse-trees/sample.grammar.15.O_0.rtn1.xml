<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="../../../gingersnap/src/ixml-html.xsl"?><ixml xmlns:follow="http://blackmesatech.com/2016/nss/ixml-gluschkov-automata-followset" xmlns:gl="http://blackmesatech.com/2019/iXML/Gluschkov" xmlns:gt="http://blackmesatech.com/2020/grammartools" xmlns:rtn="http://blackmesatech.com/2020/iXML/recursive-transition-networks" gt:date="2022-02-19T19:38:29.828283-07:00" gt:base-grammar="file:/home/cmsmcq/2022/github/ixml-tests/tests-straw/wisps/parse-trees/sample.grammar.15.ixml.xml" gt:base-grammar-uri="file:/home/cmsmcq/2022/github/ixml-tests/tests-straw/wisps/parse-trees/sample.grammar.15.ixml.xml" gl:gluschkov="dummy value" follow:followsets="dummy value" rtn:rtn="Recursive transition network"><comment>2022-02-19T19:38:29.828283-07:00: eliminate-unit-rules.xsl.</comment><comment>    Input: file:/home/cmsmcq/2022/github/ixml-tests/tests-straw/wisps/parse-trees/sample.grammar.15.O_0.rtn0.xml</comment><comment>    Output:  same grammar with unit rules eliminated. </comment>

   <comment> 2022-02-19T19:38:29.072627-07:00 creation of stack-augmented pseudo-regular grammar (SAPRG) by ixml-to-saprg.xsl. </comment>
   <comment> Input grammar G: file:/home/cmsmcq/2022/github/Gingersnap/src/grammar-pipeline-handler.xsl </comment>
   <comment> Output grammar G′:  this grammar.</comment>
   <comment> A stack automaton guided by grammar G′and the rtn:stack attributes should recognize L(G), the same language recognized by G.  If the rtn:stack attributes are ignored, this is a (pseudo-)regular grammar which recognizes the R_0 superset of L(G). </comment>
   <comment>2022-02-19T19:38:29.072627-07:00: item-labeling.xsl.</comment>
   <comment>    Input: file:/home/cmsmcq/2022/github/ixml-tests/tests-straw/wisps/parse-trees/sample.grammar.15.ixml.xml</comment>
   <comment>    Output:  same grammar with item labels added. </comment>
   <comment>2022-02-19T19:38:29.072627-07:00: ixml-annotate-gluschkov.xsl.</comment>
   <comment>    Input: file:/home/cmsmcq/2022/github/ixml-tests/tests-straw/wisps/parse-trees/sample.grammar.15.ixml.xml</comment>
   <comment>    Grammar augmented with Gluschkov automata (@gl:*).</comment>
   <comment>2022-02-19T19:38:29.072627-07:00: ixml-annotate-pc.xsl.</comment>
   <comment>    Input: file:/home/cmsmcq/2022/github/ixml-tests/tests-straw/wisps/parse-trees/sample.grammar.15.ixml.xml</comment>
   <comment>    Grammar augmented with @gt:recursive etc.</comment>
   <comment> Expansion for S. </comment>
   <comment> S: S, S; 'x'. </comment>
   <rule name="S_0">
      <alt rtn:ruletype="terminal">
         <literal string="x" rtn:item="S = &#34;x&#34; ⦁ ."/>
         <nonterminal rtn:nttype="state" name="S_3" rtn:stack="push S_1"/>
      </alt>
      <alt rtn:ruletype="terminal">
         <literal string="x" rtn:item="S = &#34;x&#34; ⦁ ."/>
         <nonterminal rtn:nttype="state" name="S_3"/>
      </alt>
   </rule>
   <rule name="S_1" rtn:nttype="state" rtn:item="S = ^S ⦁ , ^S.">
      <alt rtn:ruletype="terminal">
         <literal string="x" rtn:item="S = &#34;x&#34; ⦁ ."/>
         <nonterminal rtn:nttype="state" name="S_3" rtn:stack="push S_2"/>
      </alt>
   </rule>
   <rule name="S_2" rtn:nttype="state" rtn:item="S = ^S, ^S ⦁ .">
      <alt rtn:ruletype="terminal">
         <literal string="x" rtn:item="S = &#34;x&#34; ⦁ ."/>
         <nonterminal rtn:nttype="state" name="S_3" rtn:stack="pop S_1, push S_2"/>
      </alt><alt rtn:RHStype="grammar-final" rtn:stack="if-stack-empty">
         <comment>nil</comment>
      </alt>
   </rule>
   <rule name="S_3" rtn:nttype="state" rtn:item="S = &#34;x&#34; ⦁ .">
      <alt rtn:ruletype="terminal">
         <literal string="x" rtn:item="S = &#34;x&#34; ⦁ ."/>
         <nonterminal rtn:nttype="state" name="S_3" rtn:stack="pop S_1, push S_2"/>
      </alt><alt rtn:RHStype="grammar-final" rtn:stack="if-stack-empty">
         <comment>nil</comment>
      </alt>
   </rule>
   <rule name="S_f">
      <alt rtn:ruletype="terminal">
         <literal string="x" rtn:item="S = &#34;x&#34; ⦁ ."/>
         <nonterminal rtn:nttype="state" name="S_3" rtn:stack="pop S_1, push S_2"/>
      </alt>
      <alt rtn:ruletype="terminal">
         <literal string="x" rtn:item="S = &#34;x&#34; ⦁ ."/>
         <nonterminal rtn:nttype="state" name="S_3" rtn:stack="pop S_2, pop S_1, push S_2"/>
      </alt><alt rtn:RHStype="grammar-final" rtn:stack="if-stack-empty">
         <comment>nil</comment>
      </alt>
      <alt rtn:RHStype="grammar-final" rtn:stack="if-stack-empty">
         <comment>nil</comment>
      </alt>
   </rule>
   <comment> End of expansion for S. </comment>
</ixml>